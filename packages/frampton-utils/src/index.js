import Frampton from 'frampton/namespace';
import apply from 'frampton-utils/apply';
import assert from 'frampton-utils/assert';
import compose from 'frampton-utils/compose';
import curry from 'frampton-utils/curry';
import equal from 'frampton-utils/equal';
import extend from 'frampton-utils/extend';
import get from 'frampton-utils/get';
import identity from 'frampton-utils/identity';
import immediate from 'frampton-utils/immediate';
import isArray from 'frampton-utils/is_array';
import isDefined from 'frampton-utils/is_defined';
import isEqual from 'frampton-utils/is_equal';
import isNothing from 'frampton-utils/is_nothing';
import isSomething from 'frampton-utils/is_something';
import isNull from 'frampton-utils/is_null';
import isObject from 'frampton-utils/is_object';
import isString from 'frampton-utils/is_string';
import isUndefined from 'frampton-utils/is_undefined';
import isBoolean from 'frampton-utils/is_boolean';
import isFunction from 'frampton-utils/is_function';
import isPromise from 'frampton-utils/is_promise';
import log from 'frampton-utils/log';
import lazy from 'frampton-utils/lazy';
import memoize from 'frampton-utils/memoize';
import noop from 'frampton-utils/noop';
import ofValue from 'frampton-utils/of_value';
import safeGet from 'frampton-utils/safe_get';

Frampton.Utils = {};
Frampton.Utils.apply = apply;
Frampton.Utils.assert = assert;
Frampton.Utils.compose = compose;
Frampton.Utils.curry = curry;
Frampton.Utils.equal = equal;
Frampton.Utils.extend = extend;
Frampton.Utils.get = get;
Frampton.Utils.identity = identity;
Frampton.Utils.immediate = immediate;
Frampton.Utils.isArray = isArray;
Frampton.Utils.isDefined = isDefined;
Frampton.Utils.isEqual = isEqual;
Frampton.Utils.isNothing = isNothing;
Frampton.Utils.isSomething = isSomething;
Frampton.Utils.isNull = isNull;
Frampton.Utils.isObject = isObject;
Frampton.Utils.isString = isString;
Frampton.Utils.isUndefined = isUndefined;
Frampton.Utils.isBoolean = isBoolean;
Frampton.Utils.isFunction = isFunction;
Frampton.Utils.isPromise = isPromise;
Frampton.Utils.log = log;
Frampton.Utils.lazy = lazy;
Frampton.Utils.memoize = memoize;
Frampton.Utils.noop = noop;
Frampton.Utils.ofValue = ofValue;
Frampton.Utils.safeGet = safeGet;